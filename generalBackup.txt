
//下面是两个函数的备份

//void Dialog::pushCursor()
//{
//    qDebug()<<"Cursor Changed";
//}
//bool Dialog::tryMerge(/*const QTextUndoCommand &other*/)
//{
//    //两次操作不一样
//    if (addORdel != addORdelOld)
//    {
//        QSqlQuery query;
//        qDebug()<<"database operation:"
//                <<query.exec(QString("INSERT INTO %1 (position, length, word, addORdel, mode) VALUES (%2,%3,'%4',%5,1);")
//                             .arg(fileIO.name)
//                             .arg(position)
//                             .arg(addLength)
//                             .arg(textVersion)
//                             .arg(addORdel))
//                <<query.lastError().text();
//        textVersion=textChanged;
////        version_Temp="";
//        addORdelOld=addORdel;
//        return false;
//    }
//    else
//    {
//         textVersion += textChanged;
//         addORdelOld=addORdel;
//         return true;
//    }
    //还可以有其他方式来实现
//    if (command != other.command)
//        return false;

//    if (command == Inserted
//        && (pos + length == other.pos)
//        && (strPos + length == other.strPos)
//        && format == other.format) {

//        length += other.length;
//        return true;
//    }

//    // removal to the 'right' using 'Delete' key
//    if (command == Removed
//        && pos == other.pos
//        && (strPos + length == other.strPos)
//        && format == other.format) {

//        length += other.length;
//        return true;
//    }

//    // removal to the 'left' using 'Backspace'
//    if (command == Removed
//        && (other.pos + other.length == pos)
//        && (other.strPos + other.length == strPos)
//        && (format == other.format)) {

//        int l = length;
//        (*this) = other;

//        length += l;
//        return true;
//    }

//    return false;
//}

//void Dialog::getContent(int position,int deleteLenght,int addLength)
//{
//    if (deleteLenght == addLength)/*我也不知道为什么会有那么多相等出现*/
//        //直接返回.不处理
//        return ;
//    qDebug()<<tr("cursor position")<<position<<tr("deleted lenght")<<deleteLenght<<tr("add lenght")<<addLength;
//    //新增与删除两个部分分开
//    /*判断是否输入了非英文字符*/
//    /*使用输入发之后就会出现这个问题.*/
//    if ((deleteLenght != 0) && /*删掉之前的所有文字*/
//        (addLength != 0)){ /*新增多的文字*/
//        //当删掉最后一个字的时候会产生"0,1,0"的意外情况直接处理.无视之
//        //处理新增的文字
//        position = position+deleteLenght-1;
//        addLength = (uint)(addLength - deleteLenght);
//    }
//    if (addLength == 0){/*删除的话不知道有没有什么hook能显式的截获输出*/
//        //只有在新增的时候保存一个string的备份.在删除的时候进行跟新了.
//        //在这里处理删除操作的文字
//        addLength = deleteLenght;
//        qDebug()<<tr("delete")
//                <<(text_Temp=text_Backup.mid(position,addLength));
//        addORdel=0;
//        //OK
//    }
//    else
//    {
//        qDebug()<<(text_Temp=myText->toPlainText().mid(position,addLength));
//        addORdel=true;
//    }
//    QSqlQuery query;
//    qDebug()<<"database operation:"
//            <<query.exec(QString("INSERT INTO %1 (position, length, word, addORdel, mode) VALUES (%2,%3,'%4',%5,1);")
//                         .arg(fileIO.name)
//                         .arg(position)
//                         .arg(addLength)
//                         .arg(text_Temp)
//                         .arg(addORdel))
//            <<query.lastError().text();
//    text_Backup = myText->toPlainText();
//    if (text_Backup.isEmpty())
//        qDebug()<<tr("text data empty!");
//    return ;
//}

//对于连续的输入.进行字符插入而不写入数据库
//    if ((addLength == 0) && (deleteLenght == 1)) /*删除的话不知道有没有什么hook能显式的截获输出*/
//    {
//        //只有在新增的时候保存一个string的备份.在删除的时候进行跟新了.
//        //在这里处理删除操作的文字
//        addLength = deleteLenght;
//        qDebug()<<tr("delete")<<(textChanged=lastText.mid(position,addLength));
//        addORdel=false;
//    }
//    if ((addLength == 1) && (deleteLenght == 0))
//    {
//        qDebug()<<(textChanged=myText->toPlainText().mid(position,addLength));
//        addORdel=true;
//    }
//    if (
//            (
//                (
//                    (position==0) &&
//                    (lastPosition ==0)
//                ) ||
//                (abs(position-lastPosition) == 1)
//            ) &&
//            (lastaddORdel == addORdel)
//       )
//    {
//        //连续新增或者删除字符
//        textVersion += textChanged;
//    }
//    if ((lastaddORdel != addORdel) || (abs(position-lastPosition)!=1))
//    {
//        postInfo(position,addLength);
//        textVersion = textChanged;
//    }

//    //输入法的存在导致了新增数据的时候多个增删长度的出现.单独考虑
//    if ((deleteLenght != 0) && /*删掉之前的所有文字*/
//        (addLength != 0)){ /*新增多的文字*/
//        //当删掉最后一个字的时候会产生"0,1,0"的意外情况直接处理.无视之
//        //处理新增的文字
//        position = position+deleteLenght-1;
//        addLength = abs(addLength - deleteLenght);
//        qDebug()<<(textVersion=myText->toPlainText().mid(position,addLength));
//        addORdel=true;
//        postInfo(position,addLength);
//        textVersion="";
////        直接写入数据库?
//    }

//    ///////////////////////////////////////////////////////////////////////////////////////////
//    //尝试合并相同的操作
//    //两次操作不一样
////    if (addORdel != lastaddORdel)
////    {

////        textVersion=textChanged;
////    }
////    else
////    {
////         textVersion += textChanged;
////    }
//    lastPosition = position;
//    lastaddORdel=addORdel;
